
import React, { useState } from "react";
import { Plus, BookOpen, Code, Database, Brain, Zap, Target } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet";
import { useToast } from "@/hooks/use-toast";

interface CreateWorkspaceProps {
  onCreateWorkspace: (workspace: any) => void;
}

const CreateWorkspace = ({ onCreateWorkspace }: CreateWorkspaceProps) => {
  const { toast } = useToast();
  const [isOpen, setIsOpen] = useState(false);
  const [formData, setFormData] = useState({
    title: "",
    subject: "",
    description: "",
    selectedIcon: "BookOpen",
    selectedColor: "from-violet-500 to-purple-600"
  });

  const iconOptions = [
    { name: "BookOpen", icon: BookOpen, label: "Books" },
    { name: "Code", icon: Code, label: "Programming" },
    { name: "Database", icon: Database, label: "Database" },
    { name: "Brain", icon: Brain, label: "AI/ML" },
    { name: "Zap", icon: Zap, label: "Electronics" },
    { name: "Target", icon: Target, label: "Strategy" }
  ];

  const colorOptions = [
    { name: "Violet", value: "from-violet-500 to-purple-600" },
    { name: "Teal", value: "from-teal-500 to-cyan-600" },
    { name: "Pink", value: "from-pink-500 to-rose-600" },
    { name: "Green", value: "from-green-500 to-emerald-600" },
    { name: "Orange", value: "from-orange-500 to-red-600" },
    { name: "Blue", value: "from-blue-500 to-indigo-600" }
  ];

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.title.trim()) {
      toast({
        title: "Error",
        description: "Please enter a workspace title.",
        variant: "destructive"
      });
      return;
    }

    const newWorkspace = {
      id: Date.now(), // In a real app, this would be generated by the backend
      title: formData.title,
      subject: formData.subject || formData.title.substring(0, 3).toUpperCase(),
      progress: 0,
      totalTopics: 8,
      completedTopics: 0,
      color: formData.selectedColor,
      icon: iconOptions.find(icon => icon.name === formData.selectedIcon)?.icon || BookOpen,
      recent: "Getting Started",
      description: formData.description
    };

    onCreateWorkspace(newWorkspace);
    
    // Reset form
    setFormData({
      title: "",
      subject: "",
      description: "",
      selectedIcon: "BookOpen",
      selectedColor: "from-violet-500 to-purple-600"
    });
    
    setIsOpen(false);
    
    toast({
      title: "Success!",
      description: "New workspace created successfully.",
    });
  };

  const selectedIconComponent = iconOptions.find(icon => icon.name === formData.selectedIcon)?.icon || BookOpen;

  return (
    <Sheet open={isOpen} onOpenChange={setIsOpen}>
      <SheetTrigger asChild>
        <Button 
          variant="outline" 
          className="border-violet-500/50 text-violet-300 hover:bg-violet-500/20"
        >
          <Plus className="w-4 h-4 mr-2" />
          New Workspace
        </Button>
      </SheetTrigger>
      <SheetContent className="w-[500px] bg-gray-900 border-gray-700">
        <SheetHeader>
          <SheetTitle className="text-white">Create New Workspace</SheetTitle>
          <SheetDescription className="text-gray-400">
            Set up a new learning workspace for your studies
          </SheetDescription>
        </SheetHeader>
        
        <form onSubmit={handleSubmit} className="space-y-6 mt-6">
          {/* Preview */}
          <Card className="p-4 bg-gray-800/50 border-gray-700">
            <h4 className="text-sm font-medium mb-3 text-gray-300">Preview</h4>
            <div className={`w-12 h-12 bg-gradient-to-r ${formData.selectedColor} rounded-xl flex items-center justify-center mb-3`}>
              {React.createElement(selectedIconComponent, { className: "w-6 h-6 text-white" })}
            </div>
            <h5 className="font-semibold text-white">{formData.title || "Workspace Title"}</h5>
            <p className="text-sm text-gray-400">{formData.description || "Workspace description"}</p>
          </Card>

          {/* Title */}
          <div className="space-y-2">
            <Label htmlFor="title" className="text-sm text-gray-300">Title *</Label>
            <Input
              id="title"
              value={formData.title}
              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
              placeholder="e.g., Machine Learning Fundamentals"
              className="bg-gray-700 border-gray-600 text-white"
              required
            />
          </div>

          {/* Subject Code */}
          <div className="space-y-2">
            <Label htmlFor="subject" className="text-sm text-gray-300">Subject Code</Label>
            <Input
              id="subject"
              value={formData.subject}
              onChange={(e) => setFormData(prev => ({ ...prev, subject: e.target.value }))}
              placeholder="e.g., ML, DSA, OS"
              className="bg-gray-700 border-gray-600 text-white"
              maxLength={5}
            />
          </div>

          {/* Description */}
          <div className="space-y-2">
            <Label htmlFor="description" className="text-sm text-gray-300">Description</Label>
            <Input
              id="description"
              value={formData.description}
              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
              placeholder="Brief description of this workspace"
              className="bg-gray-700 border-gray-600 text-white"
            />
          </div>

          {/* Icon Selection */}
          <div className="space-y-2">
            <Label className="text-sm text-gray-300">Icon</Label>
            <div className="grid grid-cols-3 gap-2">
              {iconOptions.map((option) => (
                <Button
                  key={option.name}
                  type="button"
                  variant={formData.selectedIcon === option.name ? "default" : "outline"}
                  size="sm"
                  onClick={() => setFormData(prev => ({ ...prev, selectedIcon: option.name }))}
                  className={`flex flex-col items-center p-3 h-auto ${
                    formData.selectedIcon === option.name 
                      ? "bg-violet-500/20 border-violet-500" 
                      : "border-gray-600 hover:border-gray-500"
                  }`}
                >
                  <option.icon className="w-5 h-5 mb-1" />
                  <span className="text-xs">{option.label}</span>
                </Button>
              ))}
            </div>
          </div>

          {/* Color Selection */}
          <div className="space-y-2">
            <Label className="text-sm text-gray-300">Color Theme</Label>
            <div className="grid grid-cols-3 gap-2">
              {colorOptions.map((option) => (
                <Button
                  key={option.name}
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => setFormData(prev => ({ ...prev, selectedColor: option.value }))}
                  className={`p-3 h-auto border-2 ${
                    formData.selectedColor === option.value 
                      ? "border-white" 
                      : "border-gray-600 hover:border-gray-500"
                  }`}
                >
                  <div className={`w-full h-8 bg-gradient-to-r ${option.value} rounded`} />
                  <span className="text-xs mt-1">{option.name}</span>
                </Button>
              ))}
            </div>
          </div>

          {/* Submit Button */}
          <Button
            type="submit"
            className="w-full bg-gradient-to-r from-violet-500 to-purple-500 hover:from-violet-600 hover:to-purple-600"
          >
            Create Workspace
          </Button>
        </form>
      </SheetContent>
    </Sheet>
  );
};

export default CreateWorkspace;
